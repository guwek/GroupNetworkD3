% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/groupForceNetwork.R
\name{groupForceNetwork}
\alias{groupForceNetwork}
\title{Create a D3 JavaScript force directed network graph with new features.}
\source{
D3.js was created by Michael Bostock. See \url{http://d3js.org/} and, more
specifically for force directed networks
\url{https://github.com/mbostock/d3/wiki/Force-Layout}.
}
\usage{
groupForceNetwork(Links, Nodes, Source, Target, linkType, linkValue, nodeID,
  nodeSize, nodeGroup, nodeGroupName, nodeValue, height = NULL,
  width = NULL, nColourScale = JS("d3.scale.category20()"),
  hColourScale = JS("d3.scale.category20()"), fontSize = 7,
  fontFamily = "serif", radiusCalculation = JS(" Math.sqrt(d.nodesize)+6"),
  charge = -1000, linkColour = "#666", opacity = 0.6, zoom = FALSE,
  opacityNoHover = 0, highlightedGene, directional = FALSE)
}
\arguments{
\item{Links}{a data frame object with the links between the nodes. It should
include the \code{Source} and \code{Target} for each link. These should be
numbered starting from 0. An optional \code{linkValue} variable can be
included to specify the width of each link. \code{linkType} variable can be
included to specify the type of each link, including three types of link
types: regulate, inhibit, and phospho. If the variable \code{directional} is
True, different shapes will present at the end of target side. If the link
type does not specify, it will present the undirected link without shape at
the end of target side.}

\item{Nodes}{a data frame containing the node id and properties of the nodes.
It should include the \code{nodeID} for each node. An optional
\code{nodeGroup} variable can be included to specify the index of the
membership for each node such that nodes with different group indices will
be grouped into different convex in the visualization. An optional
\code{nodeGroupName} variable can be included to specify the name of the
membership variable such that users can mouseover convex to see the name of
the group or see the name when the convex is collapsed. An optional
\code{nodeValue} variable can be included to specify the value on the node.
Given a corresponding node color scale (which can be specified in
\code{nColourScale}), each node will disply different colors in terms of the
value on the node. An optional \code{highlightedGene} variable can be
included to specify whether the node should be highlighted or not (1, 0).}

\item{Source}{character string naming the network source variable in the
\code{Links} data frame.}

\item{Target}{character string naming the network target variable in the
\code{Links} data frame.}

\item{linkValue}{character string naming the variable in the \code{Links}
data frame for how wide the links are.}

\item{nodeGroup}{character string specifying the group of each node in the
\code{Nodes} data frame.}

\item{nodeGroupName}{character string specifying the group name of each node
in the \code{Nodes} data frame.}

\item{nodeValue}{character string specifying the value of each node in the
\code{Nodes} data frame.}

\item{height}{numeric height for the network graph's frame area in pixels.}

\item{width}{numeric width for the network graph's frame area in pixels.}

\item{nColourScale}{character string specifying thecategorical colour scale
for the nodes in terms of the value of each node (\code{nodeValue}). See
\url{https://github.com/mbostock/d3/wiki/Ordinal-Scales}.}

\item{hColourScale}{character string specifying thecategorical colour scale
for the groups of convex. See
\url{https://github.com/mbostock/d3/wiki/Ordinal-Scales}.}

\item{fontSize}{numeric font size in pixels for the node text labels.}

\item{fontFamily}{font family for the node text labels.
\code{radiusCalculation = JS("Math.sqrt(d.nodesize)+6")}.}

\item{charge}{numeric value indicating either the strength of the node
repulsion (negative value) or attraction (positive value).}

\item{linkColour}{character string specifying the colour you want the link
lines to be. Multiple formats supported (e.g. hexadecimal).}

\item{opacity}{numeric value of the proportion opaque you would like the
graph elements to be.}

\item{zoom}{logical value to enable (\code{TRUE}) or disable (\code{FALSE})
zooming.}

\item{opacityNoHover}{numeric value of the opacity proportion for node labels
text when the mouse is not hovering over them.}

\item{highlightedGene}{character string specifying whether each node in the
\code{Nodes} data frame should be highlighted in the visualization or not.}

\item{directional}{logical value to enable the link presnets direction or
not.}

\item{NodeID}{character string specifying the node IDs in the \code{Nodes}
data frame.}

\item{Nodesize}{character string specifying the a column in the \code{Nodes}
data frame with some value to vary the node radius's with. See also
\code{radiusCalculation}.}
}
\value{
An interactive network graph for a Shiny app. Use
\code{input$networkD3_node_name} in a Shiny app to capture the name of
mouseover node. Use \code{input$networkD3_target_name} and
\code{input$networkD3_source_name} in a Shiny app to capture the name of
target and source node of mouseover edge. Use \code{groupForceNetworkOutput}
function in ui.R to show the output of groupForceNetwork and
\code{renderGroupForceNetwork} function in server.R to render interactive
network with \code{groupForceNetwork} function.
}
\description{
groupForceNetwork is an extension of the forece directd network graph in
networkD3 library. It includes several new functions:
\itemize{
 \item{Capture JS events and send back to R interface.}
 \item{Highlight nodes and neighbors whne mouseover the node.}
 \item{Show the membership for sets of nodes with polygon.}
 \item{Collapsable/expandable function of subnetworks.}
 \item{Provide the option of displaying directionality and three effects on
  edges.}
}
}
\examples{
# Load data
data(exampleEdges)
data(exampleNodes)
data(exampleHullColours)
data(exampleNodeColours)

# Create graph
groupForceNetwork(Links = exampleEdges, Nodes = exampleNodes,
             Source = "source", Target = "target", linkValue = "stroke",
             nodeID = "name", zoom = TRUE, nodeValue = "heat")

# Create a graph with different group
groupForceNetwork(Links = exampleEdges, Nodes = exampleNodes,
             Source = "source", Target = "target", linkValue = "stroke",
             nodeID = "name", nodeGroup = "group", nodeGroupName = "grpname",
             zoom = TRUE, nodeValue="heat",
             nColourScale = exampleNodeColours,
             hColourScale = exampleHullColours)

# Create a graph with different group and directionality
groupForceNetwork(Links = exampleEdges, Nodes = exampleNodes,
             Source = "source", Target = "target", linkValue = "stroke",
             nodeID = "name", nodeGroup = "group", nodeGroupName = "grpname",
             zoom = TRUE, nodeValue="heat",
             nColourScale = exampleNodeColours,
             hColourScale = exampleHullColours, directional=T)
}

